# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   
#  Render the log filename from the given template.
#  Replaces certain placeholders within the provided format.
#
#
Puppet::Functions.create_function(:'format_logfile') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

  unless args.length == 2
    raise Puppet::ParseError, "format_logfile(): wrong number of arguments (#{args.length}; must be 2)"
  end

  unless args[1].is_a?(Hash)
    raise Puppet::ParseError, "format_logfile(): expects the second argument to be a hash, got #{args[1].inspect} which is of type #{args[1].class}"
  end
  values = args[1]

  unless args[0].is_a?(String)
    raise Puppet::ParseError, "format_logfile(): expects the first argument to be a string, got #{args[0].inspect} which is of type #{args[0].class}"
  end
  format = args[0]

  # loop over the values to replace.
  values.each do |key,value|
    re = Regexp.new("(^|[^%])%(#{key})")
    format = format.gsub(re, "\\1#{value}")
  end

  format.gsub(/%%/, '%')


  end
end
