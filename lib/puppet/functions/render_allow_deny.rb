# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   
#Makes sure the value is always an array, unless its nil.
#
#If the argument is a hash, we will create an array where each element
#is the key value separated with a space.
#
#
Puppet::Functions.create_function(:'render_allow_deny') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

  if args.empty? or args.size < 3 or args.size > 4
    raise Puppet::ParseError, 'You must supply 3 arguments (+ optional indent)'
  end
  order = args.shift
  allow_from = [ args.shift ].flatten.reject {|v| v.nil? || v.lstrip == '' }
  deny_from = [ args.shift ].flatten.reject { |v| v.nil? || v.lstrip == '' }
  indent = args.shift || 4
  i = " " * indent

  result = []
  result << "#{i}Order #{order}"
  unless allow_from.empty?
    result << "#{i}Allow from #{allow_from.join(' ')}"
  end
  unless deny_from.empty?
    result << "#{i}Deny from #{deny_from.join(' ')}"
  end

  result.join("\n")


  end
end
